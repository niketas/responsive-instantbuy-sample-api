/**
 * This file contains the application logic. It handles all of the user actions
 * on the page, initializes views, variables and cookies, and makes AJAX
 * requests to the server for the JWTs.
 *
 * @author pying(Peng Ying)
 */
var bikeStore = bikeStore || {};

(function(app) {

  /**
   * Shipping cost.
   * @const {Number}
   */
  app.SHIPPING = 9.99;

  /**
   * Tax cost.
   * @const {Number}
   */
  app.TAX = 8.00;

  /**
   * Default item description text length.
   * @const {Number}
   */
  app.TEXT_LENGTH = 100;

  /**
   * Text adjustment.
   * @const {Number}
   */
  app.TOLERANCE = 5;

  /**
   * Collapsed text link icon.
   * @const {String}
   */
  app.MAX_TEXT = '... &#187;';

  /**
   * Expanded text link icon.
   * @const {String}
   */
  app.MIN_TEXT = '&#171;';

  /**
   * Items for sale.
   * @type {bikeStore.Models.Items}
   */
  app.items;

  /**
   * Currently selected item.
   * @type {bikeStore.Models.Item}
   */
  app.currentItem;

  /**
   * Shopping cart collection of items.
   * @type {bikeStore.Models.Cart}
   */
  app.cart;

  /**
   * Buyer information.
   * @type {bikeStore.Models.User}
   */
  app.user;

  /**
   * Front page view that displays a list of items.
   * @type {bikeStore.Views.SelectionView}
   */
  var selectorView;

  /**
   * Displays item details and allows the user to add the item to their
   * shopping cart.
   * @type {bikeStore.Views.ItemInfoView}
   */
  var itemInfoView;

  /**
   * Cart page, displays all items in the cart and implements the continue
   * checkout and Google Wallet buy buttons.
   * @type {bikeStore.Views.CartView}
   */
  var cartView;

  /**
   * Confirmation page displays all items in the cart and implements the place 
   * order button.
   * @type {bikeStore.Views.ConfirmationView}
   */
  var confirmationView;

  /**
   * Receipt page page displays order confirmation information.
   * @type {bikeStore.Views.ReceiptView}
   */
  var receiptView;

  /**
   * Initializes cookies, items, buttons, views, login for application.
   */
  function init() {
    // Initialize items.
    app.items = initItems();
    // Initialize user.
    app.user = new bikeStore.Models.User();
    // Initialize items.
    app.currentItem = new bikeStore.Models.CurrentItem();
    // Initialize cart.
    app.cart = new bikeStore.Models.Cart();
    // If the DOM is ready append our view elements.
    if (document.readyState === 'interactive' ||
      document.readyState === 'complete') {
      initApp();
    }
    // If it's not ready add an event handler to intialize it when ready.
    else {
      document.addEventListener('DOMContentLoaded', function() {
        initApp();
      });
    }
  }

  /**
   * Initializes the application.
   */
  function initApp() {
    // Load Views.
    initViews();
    // Bind actions to all elements that are not generated by a view.
    initActions();
    // Initialize cookies.
    initCookies();
    // Initialize Wallet if page is being reloaded.
    bikeStore.Wallet.createButton();
  }

  /**
   * Initializes the backbone template views and binds them with their
   * respective models.
   */
  function initViews() {
    // Initiate views.
    // The selector view is the front page of the application.It displays the
    // items available for sale and enables users to drill down to their
    // selection.
    selectorView = new bikeStore.Views.SelectionView({
      collection: app.items
    });
    // Renders the details of the current item.
    itemInfoView = new bikeStore.Views.ItemInfoView({
      model: app.currentItem
    });
    // Renders the selected items in the shopping cart.
    cartView = new bikeStore.Views.CartView({
      collection: app.cart
    });
    // Renders the purchase confirmation page. Allows users to edit their Wallet
    // selections.
    confirmationView = new bikeStore.Views.ConfirmationView({
        collection: app.cart,
        model: app.user
    });
    // renders the receipt page.
    receiptView = new bikeStore.Views.ReceiptView({
        collection: app.cart,
        model: app.user
    });
  }

  /**
   * Attaches click handlers to actionable HTML elements not handled by views.
   */
  function initActions() {
    $('#continue_shopping').on('click', function() {
      $.mobile.changePage('#item-selection', {
        transition: transitionType
      });
    });
    $('.home').on('click', function() {
      $.mobile.changePage('#item-selection', {
        transition: transitionType
      });
    });
    $('#continue_checkout').on('click', bikeStore.Wallet.requestMaskedWallet);
    $('#change_shipping').on('click', bikeStore.Wallet.changeMaskedWallet);
    $('#change_payment').on('click', bikeStore.Wallet.changeMaskedWallet);
    $('#place_order').on('click', bikeStore.Wallet.requestFullWallet);
    $('#receipt-home').on('click', function() {
      $.cookie('cartItem', {
        expires: null
      });
      bikeStore.App.cart.reset('');
    });
  }

  /**
   * Initializes variables from stored cookie information. Information is
   * persisted on via cookies instead of by server session to try and be more
   * server agnostic.
   */
  function initCookies() {
    app.currentItem.setItem(bikeStore.Cookie.getCurrentItem());
    app.cart.reset(bikeStore.Cookie.getCartItem().models);
    app.user.set('maskedWallet', bikeStore.Cookie.getMaskedWallet());
    app.user.set('fullWallet', bikeStore.Cookie.getFullWallet());
  }

  /**
   * Initializes items for sale.
   * @return {Array} array of items.
   */
  function initItems() {
    // Define items information.
    var products = [];
    products[0] = new bikeStore.Models.Item({
      id: '0',
      name: 'GBike',
      unitPrice: 300,
      quantity: 1,
      totalPrice: 300,
      description: ' It is simply a road bike fitted with MTB-style shifters,' +
        ' brake levers and a flat handlebar. This combination provides' +
        ' a light, fast bike with a more upright and neutral riding.' +
        ' position.',
      image: imgSrc + '/' + 'gbike.jpg'
    });
    products[1] = new bikeStore.Models.Item({
      id: '1',
      name: 'GBike 2011',
      unitPrice: 400,
      quantity: 1,
      totalPrice: 400,
      description: 'The tires are narrow, high-pressure, and smooth to' +
        ' decrease rolling resistance. The bicycle is of a lightweight' +
        ' construction.',
      image: imgSrc + '/' + 'gbike_2011.jpg'
    });
    products[2] = new bikeStore.Models.Item({
      id: '2',
      name: 'VBike',
      unitPrice: 500,
      quantity: 1,
      totalPrice: 500,
      description: 'This road bike is most commonly used for commuting,' +
        ' urban and fitness riding. This combination provides a light, fast' +
        ' bike with a more upright and neutral riding.',
      image: imgSrc + '/' + 'vbike.jpg'
    });
    products[3] = new bikeStore.Models.Item({
      id: '3',
      name: 'ConferenceBike',
      unitPrice: 600,
      quantity: 1,
      totalPrice: 600,
      description: 'One person steers while the other 6 pedal (or not) as' +
        ' the bike moves effortlessly along. More than 300 ConferenceBikes' +
        ' are now being enjoyed by a wide variety of groups in 18 countries.',
      image: imgSrc + '/' + 'conferencebike.jpg'
    });
    items = new bikeStore.Models.Items();
    for (var item in products) {
      items.add(products[item]);
    }
    return items;
  }

  /**
   * For displaying certain text on pages and show more text on click.
   * @param {String} prefix prefix of description of item's id.
   * @param {Number} id item's id to identify description DOM element.
   */
  app.setMoreLess = function(prefix, id) {
    var para = '#' + prefix + '-' + id;
    var alltext = $(para).html().trim();
    $(para).addClass('summary');
    if (alltext.length + app.TOLERANCE < app.TEXT_LENGTH) {
      return;
    } else {
      var firstHalf = alltext.substring(0, app.TEXT_LENGTH);
      var secondHalf = alltext.substring(app.TEXT_LENGTH, alltext.length);
      var firstHalfSpan = '<span class="firstHalf">' + firstHalf + '</span>';
      var secondHalfSpan = '<span class="secondHalf">' + secondHalf + '</span>';
      var moreTextA = '<a class="more-text">' + app.MAX_TEXT + '</a>';
      var lessTextA = '<a class="less-text">' + app.MIN_TEXT + '</a>';
      var newHtml = firstHalfSpan + moreTextA + secondHalfSpan + lessTextA;
      $(para).html(newHtml);
    }
  };

  /**
   * This function requests initiates the process of adding
   * GoogleWalletButton.
   */
  app.addToCart = function() {
    // Add the selected item in the cart and saves the cart status
    // in a cookie.
    app.cart.add(app.currentItem.get('item'));
    bikeStore.Cookie.setCartItem(app.cart);
    bikeStore.Wallet.createButton();
    // Move to next page.
    $.mobile.changePage('#order-detail', {
      transition: transitionType
    });
  };

  /**
   * Set the selected item to currentItem model.
   * @param {Number} itemId selected item to purchase.
   */
  app.select = function(itemId) {
    var item = items.get(itemId);
    app.currentItem.setItem(item);
  };

  /**
   * Fix to ensure JSON.parse works correctly on Android 2.3.7.
   * @type {Function}
   */
  JSON.tempParse = JSON.parse;

  /**
   * Overwriting JSON.parse for Android 2.3.7 devices. JSON.parse(null) returns
   * an error instead of null.
   * @param {String} text JSON string to parse.
   * @return {Object} JS object.
   */
  JSON.parse = function(text) {
    return text ? JSON.tempParse(text) : null;
  };
  // Calling init() function to initialize the application.
  init();
})(window.bikeStore.App = window.bikeStore.App || {});
